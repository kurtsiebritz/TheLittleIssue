@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html lang="en">
<head>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/turn.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>

    <style>
        body {
            background-image: url('../images/background1.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            min-height: 100vh;
            overflow-y: auto;
            align-items: center;
            justify-content: center;
        }

        #book {
            width: 80%;
            height: 100%;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
        }

            #book .turn-page {
                background-color: white;
            }

            #book .cover {
                background: #333;
            }

                #book .cover h1 {
                    color: white;
                    text-align: center;
                    font-size: 50px;
                    line-height: 500px;
                    margin: 0px;
                }

        #controls {
            width: 800px;
            text-align: center;
            margin: 20px 0px;
            font: 30px arial;
            justify-content: center;
            background-color: yellow;
        }

            #controls input, #controls label, #controls span {
                font: 30px arial;
                letter-spacing: 2px;
            }

        #book .odd, #book .even {
            background: #FFF;
        }

        #loader {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 1.5rem;
            color: #333;
        }

        #content {
            display: none; /* Hide content until PDF is loaded */
        }
    </style>
</head>
<body>
    <div id="loader" style="display: flex">Loading...</div>

    <div id="book" style="display: none;">
        <div class="cover">
            <img id="cover-image" src="" alt="Cover Image" style="width: 100%; height: 100%;">
        </div>
    </div>

    <div id="controls" style="display: none">
        <label for="page-number">Page: </label> <input type="text" size="3" id="page-number"> of  <span id="number-pages"> </span>
    </div>


    <script type="text/javascript">
        let pdfDoc = null;
        let pageImages = [];
        const title = "@ViewData["DocumentTitle"]" || "Little-issue-10";
        const startPage = "@ViewData["StartPage"]" || 1;

        async function fetchPdfUrl() {
            try {
                const response = await fetch(`/api/document/getPdfUrl/${encodeURIComponent(title)}`);
                if (!response.ok) throw new Error("PDF URL not found");
                const data = await response.json();
                return data.url;
            } catch (error) {
                console.error("Error fetching PDF URL:", error);
            }
        }

        async function fetchCoverImageUrl() {
            try {
                const response = await fetch(`/api/document/getCoverImageUrl/${encodeURIComponent(title)}`);
                if (!response.ok) throw new Error("Cover image URL not found");
                const data = await response.json();
                return data.url;
            } catch (error) {
                console.error("Error fetching cover image URL:", error);
            }
        }

        async function loadPdfPages(pdfUrl) {
            pdfDoc = await pdfjsLib.getDocument(pdfUrl).promise;
            const numPages = pdfDoc.numPages;

            for (let pageNum = 1; pageNum <= numPages; pageNum++) {
                const page = await pdfDoc.getPage(pageNum);
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                const viewport = page.getViewport({ scale: 1.5 });

                canvas.width = viewport.width;
                canvas.height = viewport.height;

                await page.render({ canvasContext: context, viewport: viewport }).promise;

                if (pageNum === 1) {
                    const coverCanvas = document.createElement('canvas');
                    coverCanvas.width = canvas.width;
                    coverCanvas.height = canvas.height;
                    const coverContext = coverCanvas.getContext('2d');
                    coverContext.drawImage(canvas, 0, 0, canvas.width, canvas.height);
                    pageImages.push(coverCanvas.toDataURL());
                } else {
                    const halfWidth = canvas.width / 2;

                    const leftCanvas = document.createElement('canvas');
                    leftCanvas.width = halfWidth;
                    leftCanvas.height = canvas.height;
                    const leftContext = leftCanvas.getContext('2d');
                    leftContext.drawImage(canvas, 0, 0, halfWidth, canvas.height, 0, 0, halfWidth, canvas.height);
                    pageImages.push(leftCanvas.toDataURL());

                    const rightCanvas = document.createElement('canvas');
                    rightCanvas.width = halfWidth;
                    rightCanvas.height = canvas.height;
                    const rightContext = rightCanvas.getContext('2d');
                    rightContext.drawImage(canvas, halfWidth, 0, halfWidth, canvas.height, 0, 0, halfWidth, canvas.height);
                    pageImages.push(rightCanvas.toDataURL());
                }
            }

            initializeBook();
        }

        function initializeBook() {
            $('#book').turn({
                acceleration: true,
                pages: pageImages.length,
                elevation: 50,
                gradients: !$.isTouch,
                when: {
                    turning: function (e, page) {
                        let range = $(this).turn('range', page);
                        for (page = range[0]; page <= range[1]; page++) addPage(page, $(this));
                    },
                    turned: function (e, page) {
                        $('#page-number').val(page);
                        saveReadingHistory(title, page);
                    }
                }
            });
            $('#number-pages').html(pageImages.length);

            document.getElementById("loader").style.display = "none";
            document.getElementById("book").style.display = "flex";
            document.getElementById("controls").style.display = "flex";
        }

        function addPage(page, book) {
            if (!book.turn('hasPage', page) && pageImages[page - 1]) {
                const element = $('<div />', { 'class': 'page ' + (page % 2 === 0 ? 'odd' : 'even'), 'id': 'page-' + page });
                const img = $('<img />').attr('src', pageImages[page - 1]).css({ width: '100%', height: '100%' });
                element.append(img);
                book.turn('addPage', element, page);
            }
        }

        $(window).ready(async function () {
            const pdfUrl = await fetchPdfUrl();
            const coverImageUrl = await fetchCoverImageUrl();

            if (pdfUrl && coverImageUrl) {
                document.getElementById('cover-image').src = coverImageUrl;
                await loadPdfPages(pdfUrl);

                $('#book').turn('page', startPage);
            }

            $('#page-number').keydown(function (e) {
                if (e.keyCode === 13) {
                    const pageNum = $('#page-number').val();
                    $('#book').turn('page', pageNum);
                    saveReadingHistory(title, pageNum); // Call to save reading history
                }
            });
        });

        async function saveReadingHistory(articleTitle, pageNumber) {
            try {
                // Construct the URL with URL-encoded parameters
                const url = `/User/SaveReadingHistory/${encodeURIComponent(articleTitle)}/${pageNumber}`;

                // Make a GET request to the server
                const response = await fetch(url, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();

                if (result.isGuest) {
                    //do nothing
                } else if (result.success) {
                    console.log("Reading history saved successfully");
                } else {
                    console.error("Error saving reading history:", result.message);
                }
            } catch (error) {
                console.error("Error saving reading history:", error);
            }
        }


        $(window).bind('keydown', function (e) {
            if (e.target && e.target.tagName.toLowerCase() != 'input') {
                if (e.keyCode === 37) $('#book').turn('previous');
                else if (e.keyCode === 39) $('#book').turn('next');
            }
        });
    </script>


</body>
</html>
